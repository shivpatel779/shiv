<!-- STYLE FOR GOOGLE MAPS  -->
<style>
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
    }
    #map {
        height: 100%;
    }
    .controls {
        margin-top: 10px;
        border: 1px solid transparent;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        height: 32px;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
    }

    /*#pac-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 450px;
    }*/

    #pac-input:focus {
        border-color: #4d90fe;
    }

    .pac-container {
        font-family: Roboto;
        z-index: 10000 !important;
    }

    #type-selector {
        color: #fff;
        background-color: #4d90fe;
        padding: 5px 11px 0px 11px;
    }

    #type-selector label {
        font-family: Roboto;
        font-size: 13px;
        font-weight: 300;
    }
</style>

<div data-hook="admin_user_form_fields" class="row">
  <div class="col-md-12">
    <%= f.field_container :constituency, class: ['form-group'] do %>
        <%= f.label :constituency, Spree.t(:constituency) %>
        <%= f.text_field :constituency, :class => 'form-control' %>
        <%= f.error_message_on :constituency %>
    <% end %>

    <%= f.field_container :address, class: ['form-group'] do %>
        <%= f.label :address, Spree.t(:address) %>

        <input style="width: 100%" value="<%= f.object.address%>" id="pac-input" class="controls" type="text" placeholder="Enter a location" name="location_info[address]">
        <div id="map" style='width: 100%; height: 400px;'></div>



        <%= f.hidden_field :address, value: f.object.address %>
        <%= f.hidden_field :lat, value: f.object.lat %>
        <%= f.hidden_field :lng, value: f.object.lng %>

        <%= f.error_message_on :address %>
    <% end %>

  </div>


</div>

<script type="text/javascript">

    /*$(document).ready(function () {
        $('a[href="'+window.location.hash+'"]').trigger('click')
    })*/

    window.initMap = function() {

        var map = new google.maps.Map(document.getElementById('map'), {
            mapTypeControl: false,
            center: {lat: 23.0225, lng: 72.5714},
            zoom: 17
        });

        google.maps.event.trigger(map, 'resize');

        // Place a draggable marker on the map
        var marker = new google.maps.Marker({
            position: {lat: 23.0225, lng: 72.5714},
            map: map,
            draggable: true,
            title: "Drag me!"
        });

        google.maps.event.addListener(marker, "click", function (event) {

            var latitude = event.latLng.lat();
            var longitude = event.latLng.lng();
            console.log(latitude + ', ' + longitude);
        });

        // google places Autocomplete code

        var input = /** @type {!HTMLInputElement} */(
                document.getElementById('pac-input'));

        var types = document.getElementById('type-selector');
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

        var autocomplete = new google.maps.places.Autocomplete(input);
        autocomplete.bindTo('bounds', map);

        var infowindow = new google.maps.InfoWindow();
        var marker = new google.maps.Marker({
            map: map,
            anchorPoint: new google.maps.Point(0, -29)
        });

        autocomplete.addListener('place_changed', function () {
            infowindow.close();
            marker.setVisible(false);
            var place = autocomplete.getPlace();
            if (!place.geometry) {
                window.alert("Autocomplete's returned place contains no geometry");
                return;
            }


            // values required to be stored in db
            console.log('Latitude '+place.geometry.location.lat().toString());
            console.log('Longitude '+place.geometry.location.lng().toString());
            console.log(place.formatted_address);

            $('#user_address').val(place.formatted_address);
            $('#user_lat').val(place.geometry.location.lat())
            $('#user_lng').val(place.geometry.location.lng())


            // If the place has a geometry, then present it on a map.
            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
                map.setZoom(17);  // Why 17? Because it looks good.
            }
            marker.setIcon(/** @type {google.maps.Icon} */({
                url: place.icon,
                size: new google.maps.Size(71, 71),
                origin: new google.maps.Point(0, 0),
                anchor: new google.maps.Point(17, 34),
                scaledSize: new google.maps.Size(35, 35)
            }));
            marker.setPosition(place.geometry.location);
            marker.setVisible(true);

            var address = '';
            if (place.address_components) {
                address = [
                    (place.address_components[0] && place.address_components[0].short_name || ''),
                    (place.address_components[1] && place.address_components[1].short_name || ''),
                    (place.address_components[2] && place.address_components[2].short_name || '')
                ].join(' ');
            }

            infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
            infowindow.open(map, marker);
        });


    }
</script>

<script type="text/javascript">
    /*$('#sbmt_info').click(function(){
     var data1 = $('.edit_user :input, .new_personal_detail :input, .new_personal_detail select, .new_location_info :input').serialize()
     $('#serialized_params').val(data1)
     $('.edit_user').submit()
     })*/

    $(document).ready(function(e) {
        if (!(typeof google === 'object' && typeof google.maps === 'object')){
            $.getScript('https://maps.googleapis.com/maps/api/js?key=AIzaSyDUpAyNtPcUNgPIXtUiJtUFXa2UZu4jI94&libraries=places&callback=initMap')
            //$("input[name='user[address]']").val("<%#= f.object.address%>")
        }
    })
</script>
