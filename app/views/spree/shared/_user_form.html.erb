<%= javascript_include_tag 'chosen-jquery' %>

<style>
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
    }
    #map {
        height: 100%;
    }
    .controls {
        margin-top: 10px;
        border: 1px solid transparent;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        height: 32px;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
    }

    #pac-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 450px;
    }

    #pac-input:focus {
        border-color: #4d90fe;
    }

    .pac-container {
        font-family: Roboto;
    }

    #type-selector {
        color: #fff;
        background-color: #4d90fe;
        padding: 5px 11px 0px 11px;
    }

    #type-selector label {
        font-family: Roboto;
        font-size: 13px;
        font-weight: 300;
    }
</style>

<fieldset id="password-credentials">
  <div class="form-group">
    <%= f.text_field :first_name, :class => 'form-control', :placeholder => Spree.t(:first_name) %>
  </div>

  <div class="form-group">
    <%= f.text_field :middle_name, :class => 'form-control', :placeholder => 'Middle Name' %>
  </div>

  <div class="form-group">
    <%= f.text_field :last_name, :class => 'form-control', :placeholder => Spree.t(:last_name) %>
  </div>

  <div class="form-group">
    <%= f.email_field :email, :class => 'form-control', :placeholder => Spree.t(:email) %>
  </div>

  <div class="form-group">
    <%= f.password_field :password, :class => 'form-control', :placeholder => Spree.t(:password) %>
  </div>

  <div class="form-group">
    <%= f.password_field :password_confirmation, :class => 'form-control', :placeholder => Spree.t(:confirm_password) %>
  </div>

  <div class="form-group">
    <%= f.label :birth_date %>
    <%= f.date_select :birth_date, :start_year => (Time.now.year - 100), :class => 'form-control', :placeholder => Spree.t(:birth_date) %>
  </div>

  <div class="form-group">
    <%= f.text_field :phone, :class => 'form-control', :placeholder => Spree.t(:phone) %>
  </div>

  <div class="form-group">
    <%= f.select :spree_country_id, options_for_select(Spree::Country.order(:id).map { |country| [country.name, country.id] }, Spree::Country.first.id) %>
  </div>

  <div class="form-group">
    <%= f.select :spree_state_id, options_from_collection_for_select(Spree::Country.first.states.order(:id), 'id', 'name') %>
  </div>


  <div class="form-group">
    <%= f.text_field :national_id, :class => 'form-control', :placeholder => 'National ID' %>
  </div>

  <div class="form-group">
    <input id="pac-input" class="controls" type="text" placeholder="Enter a location">
  </div>

  <div class="form-group">


    <!--<div id="type-selector" class="controls">
      <input type="radio" name="type" id="changetype-all" checked="checked">
      <label for="changetype-all">All</label>

      <input type="radio" name="type" id="changetype-establishment">
      <label for="changetype-establishment">Establishments</label>

      <input type="radio" name="type" id="changetype-address">
      <label for="changetype-address">Addresses</label>

      <input type="radio" name="type" id="changetype-geocode">
      <label for="changetype-geocode">Geocodes</label>
    </div>-->
  </div>

  <div class="form-group">
    <label>Location</label>
    <div id="map" style='width: 800px; height: 400px;'></div>
  </div>


</fieldset>
<div data-hook="signup_below_password_fields"></div>

<script type="text/javascript">
    /* handler = Gmaps.build('Google');
     handler.buildMap({ provider: {}, internal: {id: 'map'}}, function(){
     markers = handler.addMarkers([
     {
     "lat": 23.0225,
     "lng": 72.5714,
     'draggable': true,
     "picture": {
     "width":  32,
     "height": 32
     },
     "infowindow": "hello!"
     }
     ]);


     handler.bounds.extendWith(markers);
     handler.fitMapToBounds();
     });*/

    window.initMap = function() {
        var map = new google.maps.Map(document.getElementById('map'), {
            center: {lat: 23.0225, lng: 72.5714},
            zoom: 13
        });

        // Place a draggable marker on the map
        var marker = new google.maps.Marker({
            position: {lat: 23.0225, lng: 72.5714},
            map: map,
            draggable: true,
            title: "Drag me!"
        });

        google.maps.event.addListener(marker, "click", function (event) {
            console.log('click event..')
            var latitude = event.latLng.lat();
            var longitude = event.latLng.lng();
            console.log(latitude + ', ' + longitude);
        });

        // google places Autocomplete code

        var input = /** @type {!HTMLInputElement} */(
                document.getElementById('pac-input'));

        var types = document.getElementById('type-selector');
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

        var autocomplete = new google.maps.places.Autocomplete(input);
        autocomplete.bindTo('bounds', map);

        var infowindow = new google.maps.InfoWindow();
        var marker = new google.maps.Marker({
            map: map,
            anchorPoint: new google.maps.Point(0, -29)
        });

        autocomplete.addListener('place_changed', function () {
            infowindow.close();
            marker.setVisible(false);
            var place = autocomplete.getPlace();
            if (!place.geometry) {
                window.alert("Autocomplete's returned place contains no geometry");
                return;
            }


            // values required to be stored in db
            console.log('Latitude '+place.geometry.location.lat().toString());
            console.log('Longitude '+place.geometry.location.lng().toString());
            console.log(place.formatted_address);

            // If the place has a geometry, then present it on a map.
            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
                map.setZoom(17);  // Why 17? Because it looks good.
            }
            marker.setIcon(/** @type {google.maps.Icon} */({
                url: place.icon,
                size: new google.maps.Size(71, 71),
                origin: new google.maps.Point(0, 0),
                anchor: new google.maps.Point(17, 34),
                scaledSize: new google.maps.Size(35, 35)
            }));
            marker.setPosition(place.geometry.location);
            marker.setVisible(true);

            var address = '';
            if (place.address_components) {
                address = [
                    (place.address_components[0] && place.address_components[0].short_name || ''),
                    (place.address_components[1] && place.address_components[1].short_name || ''),
                    (place.address_components[2] && place.address_components[2].short_name || '')
                ].join(' ');
            }

            infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
            infowindow.open(map, marker);
        });

        // Sets a listener on a radio button to change the filter type on Places
        // Autocomplete.
        function setupClickListener(id, types) {
            var radioButton = document.getElementById(id);
            radioButton.addEventListener('click', function () {
                autocomplete.setTypes(types);
            });
        }

        setupClickListener('changetype-all', []);
        setupClickListener('changetype-address', ['address']);
        setupClickListener('changetype-establishment', ['establishment']);
        setupClickListener('changetype-geocode', ['geocode']);

    }
</script>


<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDUpAyNtPcUNgPIXtUiJtUFXa2UZu4jI94&libraries=places&callback=initMap"
        async defer></script>
